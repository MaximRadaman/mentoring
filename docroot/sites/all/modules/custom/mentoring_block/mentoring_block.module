<?php
/**
 * @file
 * Testing block api and batch api functions.
 */

define('MENTORING_BLOCK_DEFAULT_CAR', 'bmw');
define('MENTORING_BLOCK_TERM_BATCH_LIMIT', 100);
define('MENTORING_BLOCK_UPLOAD_TERMS_VOCABULARY', 'tags');

/**
 * Implements hook_menu().
 */
function mentoring_block_menu() {
  $items['admin/config/block-visibility'] = [
    'title' => 'Configure blocks visibility',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['mentoring_block_visibility_form'],
    'access arguments' => ['administer site configuration'],
    'file' => 'inc/mentoring_block.inc',
  ];
  $items['admin/config/terms-batch'] = [
    'title' => 'Upload terms from file',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['mentoring_block_terms_upload_form'],
    'access arguments' => ['administer site configuration'],
    'file' => 'inc/mentoring_block.inc',
  ];


  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mentoring_block_form_block_admin_display_form_alter(&$form, &$form_state) {
  if ($blocks = variable_get('mentoring_block_hidden_blocks', [])) {
    foreach ($blocks as $key => $title) {
      $matches = [];
      $result = preg_match('/\((.+)\)$/', $title, $matches);
      if ($matches[$result]) {
        unset($form['blocks'][$matches[1]]);
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function mentoring_block_block_info() {
  $blocks['mentoring_block_car_brend'] = [
    'info' => t('Car brend'),
    'status' => TRUE,
    'region' => 'sidebar_first',
  ];
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function mentoring_block_block_configure($delta = '') {
  switch ($delta) {
    case 'mentoring_block_car_brend':
      $form['mentoring_block_car_brend'] = [
        '#type' => 'select',
        '#title' => t('Select car brend'),
        '#options' => [
          'bmw' => t('BMW'),
          'volvo' => t('Volvo'),
          'lada' => t('Lada'),
        ],
        '#default_value' => variable_get('mentoring_block_car_brend', MENTORING_BLOCK_DEFAULT_CAR),
      ];
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function mentoring_block_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'mentoring_block_car_brend':
      variable_set('mentoring_block_car_brend', $edit['mentoring_block_car_brend']);
  }
}

/**
 * Implements hook_block_view().
 */
function mentoring_block_block_view($delta = '') {
  switch ($delta) {
    case 'mentoring_block_car_brend':
      $car = variable_get('mentoring_block_car_brend', MENTORING_BLOCK_DEFAULT_CAR);
      $block['subject'] = t('Car brend - @car', ['@car' => $car]);
      switch ($car) {
        case 'bmw':
          $block['content'] = t('Good choice!');
          break;

        default:
          $block['content'] = t('Not bad!');
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function mentoring_block_block_view_search_form_alter(&$data, $block) {
  $block->title = t('Add Search title on hook_block_view_MODULE_DELTA_alter.');
}

/**
 * Mentoring_block_terms_upload_form form.
 */
function mentoring_block_terms_upload_form($form, &$form_state) {
  $form['mentoring_block_terms_file'] = [
    '#type' => 'managed_file',
    '#title' => t('Import'),
    '#description' => t('The uploaded excel will be imported and temporarily saved.'),
    '#upload_location' => 'public://tmp/',
    '#upload_validators' => [
      'file_validate_extensions' => ['xls xlsx'],
    ],
  ];
  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Import'),
  ];

  return $form;

}

/**
 * Submit handler for mentoring_block_terms_upload_form.
 */
function mentoring_block_terms_upload_form_submit($form, &$form_state) {
  // Check file upload.
  $uri = db_query('SELECT uri FROM {file_managed} WHERE fid = :fid', [
    ':fid' => $form_state['input']['mentoring_block_terms_file']['fid']
  ])->fetchField();

  if (empty($uri)) {
    drupal_set_message(t('No correct $uri'), 'error');
    return;
  }

  $file_path = drupal_realpath($uri);

  if (!file_exists($file_path)) {
    drupal_set_message(t('No file found'), 'error');
    return;
  }

  // Load library.
  $library = libraries_load('PHPExcel');
  if (empty($library['loaded'])) {
    drupal_set_message(t("Couldn't load the PHPExcel library."), 'error');
    return;
  }

  // Specify max batch operations.
  try {
    $fileObj = \PHPExcel_IOFactory::load($file_path);
  }
  catch (Exception $e) {
    watchdog_exception('mentoring_block', $e);
  }
  if ($fileObj instanceof PHPExcel) {
    $sheetObj = $fileObj->getActiveSheet();
  }
  $highestRow = $sheetObj->getHighestRow();
  if (!$highestRow) {
    return;
  }
  $operations_count = ceil($highestRow / MENTORING_BLOCK_TERM_BATCH_LIMIT);

  $operations = [];
  for ($i = 0, $start = 1, $end = MENTORING_BLOCK_TERM_BATCH_LIMIT; $i < $operations_count; $i++, $start = $end + 1, $end += MENTORING_BLOCK_TERM_BATCH_LIMIT) {
    if ($i == ($operations_count - 1) &&
      ($limit = $highestRow % MENTORING_BLOCK_TERM_BATCH_LIMIT)) {
      $end = $end - MENTORING_BLOCK_TERM_BATCH_LIMIT + $limit;
    }
    $operations[] = [
      'mentoring_block_batch_term_create',
      [$file_path, $start, $end],
    ];
  }
  $batch = [
    'title' => t('Importing Excel...'),
    'operations' => $operations,
    'finished' => 'mentoring_block_terms_upload_batch_finished',
    'error_message' => t('The installation has encountered an error.'),
    'progress_message' => t('Imported @current of @total products.'),
  ];
  batch_set($batch);

}

/**
 * Batch operation for creating terms from Excel.
 *
 * @see mentoring_block_terms_upload_form_submit()
 */
function mentoring_block_batch_term_create($file_path, $start, $end, &$context) {

  // Load library.
  $library = libraries_load('PHPExcel');
  if (empty($library['loaded'])) {
    drupal_set_message(t("Couldn't load the PHPExcel library."), 'error');
    $context['sandbox']['finished'] = 1;
    $context['success'] = FALSE;
    return;
  }

  // Create a new Reader of the type.
  try {
    $inputFileType = \PHPExcel_IOFactory::identify($file_path);
    $objReader = \PHPExcel_IOFactory::createReader($inputFileType);
    $chunkFilter = new ChunkReadFilter();
    $objReader->setReadFilter($chunkFilter);
    $chunkFilter->setRows($start, $end);
    $objPHPExcel = $objReader->load($file_path);
  }
  catch (Exception $e) {
    watchdog_exception('mentoring_block', $e, $e->getMessage());
    return;
  }

  $sheetObj = $objPHPExcel->getActiveSheet();
  foreach ($sheetObj->getRowIterator($start, $end) as $row) {
    foreach ($row->getCellIterator() as $cell) {
      $voc = taxonomy_vocabulary_machine_name_load(MENTORING_BLOCK_UPLOAD_TERMS_VOCABULARY);
      if (!$voc) {
        return;
      }
      if ($term = taxonomy_get_term_by_name($cell->getCalculatedValue(), $voc->machine_name)) {
        continue;
      }
      $term = mentoring_block_create_term($cell->getCalculatedValue(), $voc);
      if (!$term->tid) {
        continue;
      }
      $context['results'][] = $term;
    }
  }
}

/**
 * This function runs when the batch processing is complete.
 *
 * @see mentoring_block_terms_upload_form_submit()
 */
function mentoring_block_terms_upload_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = t("!count items were processed.", array(
      '!count' => count($results),
    ));
    $message .= theme('item_list', [
      'items' => array_map(function ($term) {
        return l($term->name, "taxonomy/term/{$term->tid}");
      }, $results)
    ]);
    drupal_set_message($message);
  }
}

/**
 * Implements hook_libraries_info().
 */
function mentoring_block_libraries_info() {
  return [
    'PHPExcel' => [
      'name' => 'PHPExcel',
      'vendor url' => 'http://phpexcel.codeplex.com/',
      'download url' => 'https://github.com/PHPOffice/PHPExcel',
      'version callback' => 'mentoring_block_get_library_version',
      'path' => 'Classes',
      'files' => [
        'php' => [
          'PHPExcel.php',
        ],
      ],
    ],
  ];
}

/**
 * Libraries API version callback.
 */
function mentoring_block_get_library_version() {
  $library = libraries_load('PHPExcel');
  $changelog_file = $library['library path'] . '/changelog.txt';

  if (file_exists($changelog_file)) {
    $changelog = file_get_contents($changelog_file);

    if (preg_match('/\d{4}-\d{2}-\d{2}\s+\(v([0-9\.]+)/', $changelog, $match)) {
      return $match[1];
    }
    elseif (preg_match('/@version\s+([0-9\.]+)/', $changelog, $match)) {
      return $match[1];
    }
  }

  return 'n/a';
}

/**
 * Helper function for creating term.
 */
function mentoring_block_create_term($term_name, $vocabulary) {
  // Create term.
  $term = new stdClass();
  $term->name = $term_name;
  $term->vid = $vocabulary->vid;
  $term->parent = 0;
  taxonomy_term_save($term);
  return $term;
}
